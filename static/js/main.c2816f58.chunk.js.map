{"version":3,"sources":["Components/Cards/Cards.js","Api/index.js","Components/Chart/Chart.js","Components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js"],"names":["Grid","styled","div","CardContainer","CardInfected","CardRecovered","CardDeaths","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Container","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","Form","form","CountryPicker","handleCountryChange","setCountries","fetchAPICounties","id","htmlFor","defaultValue","onChange","e","target","i","key","Wrapper","Title","h2","App","state","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c2816f58.chunk.js","sourcesContent":["import React from \"react\";\nimport CountUp from \"react-countup\";\nimport styled from \"styled-components\";\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 1rem;\n  justify-content: center;\n  max-width: 800px;\n  margin: 0 auto;\n`;\n\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 30px 25px;\n  border: 1px solid black;\n  box-shadow: 10px 10px 5px #aaaaaa;\n\n  h3 {\n    margin: 0;\n    padding-bottom: 1em;\n    font-size: 24px;\n    font-weight: 300;\n  }\n\n  h2 {\n    margin: 0;\n    padding-bottom: 1em;\n    font-size: 28px;\n  }\n\n  p {\n    margin: 0;\n    padding: 0 0 20px;\n  }\n`;\n\nconst CardInfected = styled.div`\n  margin: 0 2% !important;\n  width: 100%;\n  border-bottom: 10px solid rgba(0, 0, 255, 0.5);\n`;\n\nconst CardRecovered = styled.div`\n  margin: 0 2% !important;\n  width: 100%;\n  border-bottom: 10px solid rgba(0, 255, 0, 0.5);\n`;\n\nconst CardDeaths = styled.div`\n  margin: 0 2% !important;\n  width: 100%;\n  border-bottom: 10px solid rgba(255, 0, 0, 0.5);\n`;\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  console.log(confirmed);\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n\n  return (\n    <Grid>\n      <CardContainer>\n        <CardInfected>\n          <h3>Infected</h3>\n          <h2>\n            <CountUp\n              start={0}\n              end={confirmed.value}\n              duration={2.5}\n              separator=\",\"\n            />\n          </h2>\n          <h3>{new Date(lastUpdate).toDateString()}</h3>\n          <p># of active cases of COVID-19.</p>\n        </CardInfected>\n      </CardContainer>\n      <CardContainer>\n        <CardRecovered>\n          <h3>Recovered</h3>\n          <h2>\n            <CountUp\n              start={0}\n              end={recovered.value}\n              duration={2.5}\n              separator=\",\"\n            />\n          </h2>\n          <h3>{new Date(lastUpdate).toDateString()}</h3>\n          <p># of recovered cases of COVID-19.</p>\n        </CardRecovered>\n      </CardContainer>\n      <CardContainer>\n        <CardDeaths>\n          <h3>Deaths</h3>\n          <h2>\n            <CountUp\n              start={0}\n              end={deaths.value}\n              duration={2.5}\n              separator=\",\"\n            />\n          </h2>\n          <h3>{new Date(lastUpdate).toDateString()}</h3>\n          <p># of deaths from by COVID-19.</p>\n        </CardDeaths>\n      </CardContainer>\n    </Grid>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({\n      confirmed: confirmed.total,\n      deaths: deaths.total,\n      date,\n    }));\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    return error;\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../Api/index\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  margin: 0 auto;\n\n  @media(min-width: 700px) {\n      width: 75%;\n  }\n`;\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n      setDailyData(initialDailyData);\n    };\n    fetchAPI();\n  }, []);\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  const lineChart = dailyData[0] ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map((data) => data.confirmed),\n            label: \"Infected\",\n            borderColor: \"rgba(0,0,255,0.5)\",\n            fill: true,\n          },\n          {\n            data: dailyData.map((data) => data.deaths),\n            label: \"Deaths\",\n            borderColor: \"rgba(255,0,0,0.5)\",\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  return <Container>{country ? barChart : lineChart}</Container>;\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { fetchCountries } from \"../../Api/index\";\n\nconst Form = styled.form`\n  max-width: 600px;\n  width: 100%;\n  margin: 2em auto 1em;\n  padding: 15px 0;\n  display: flex;\n  flex-flow: wrap;\n  align-items: center;\n  justify-content: center;\n\n  label {\n    padding: 15px;\n    font-size: 18px;\n  }\n\n  select {\n    width: 100%;\n    font-size: 20px;\n    line-height: 32px;\n    border: 0;\n    color: inherit;\n    background-color: #ffffff;\n    border-bottom: 1px solid black;\n    border-radius: 0;\n  }\n`;\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPICounties = async () => {\n      setCountries(await fetchCountries());\n    };\n    fetchAPICounties();\n  }, []);\n\n  return (\n    <Form id=\"countriesform\">\n      <label htmlFor=\"countries\">Select A Country:</label>\n      <select\n        id=\"country\"\n        name=\"countrylist\"\n        form=\"countriesform\"\n        defaultValue=\"\"\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option value=\"\">Global</option>\n        {countries.map((country, i) => (\n          <option key={i} value={country}>\n            {country}\n          </option>\n        ))}\n      </select>\n    </Form>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\nimport Cards from \"./Components/Cards/Cards\";\nimport Chart from \"./Components/Chart/Chart\";\nimport CountryPicker from \"./Components/CountryPicker/CountryPicker\";\nimport { fetchData } from \"./Api/index\";\nimport styled from \"styled-components\";\nimport \"./normalize.css\";\n\nconst Wrapper = styled.div`\n  margin: 2em auto;\n  padding: 0 20px;\n  @media(min-width: 700px) {\n    margin: 4em auto;\n  }\n`;\n\nconst Title = styled.h2`\n  font-size: 40px;\n  text-align: center;\n  margin: 0 auto;\n  padding: 15px 15px 25px;\n\n  @media(min-width: 700px) {\n    font-size: 40px;\n  }\n`;\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const data = await fetchData();\n\n    this.setState({ data });\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n\n    this.setState({ data, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <Wrapper>\n        <Title>Covid-19 Tracker</Title>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}